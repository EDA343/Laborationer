CCOM 38
Dennis Bennhage, bennhage@student.chalmers.se
Hampus Lidin, lidin@student.chalmers.se

Task 1)
  a)
    When running the 'ifconfig' command (in Mac OSX/Unix), you get all the
    information about the different interfaces at the host computer. When
    running the command in a home network, we get the following information
    about the "Ethernet 0" (en0) interface:

        $ ifconfig

        <output omitted>

        en0:  flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500
              ether 20:c9:d0:7f:0f:25
              inet6 fe80::22c9:d0ff:fe7f:f25%en0 prefixlen 64 scopeid 0x4
              inet 192.168.1.119 netmask 0xffffff00 broadcast 192.168.1.255
            	nd6 options=1<PERFORMNUD>
            	media: autoselect
            	status: active

        <output omitted>

    The 'inet' field shows information about the IPv4 configuration for that
    interface. The unicast IP-address is then "129.16.182.106/20" and the
    broadcast address for this network is "129.16.191.255/20". However, the
    IP-address is within the private address space, so the router has to
    convert it into a globally unique IP-address using "Network Address
    Translation" (NAT). This address is provided to the router by the "Internet
    Service Provider" (ISP), and all traffic in the local network going out
    from the router will then use this address to communicate through the
    Internet.

  b)
    The hostname can be found using the 'nslookup' command on the IP-address
    obtained in the previous task:

        $ nslookup 192.168.1.1

        Server:		192.168.1.1
        Address:	192.168.1.1#53

        119.1.168.192.in-addr.arpa	name = Hampus-MBP.huawei.com.

    The answer is given by the name server "119.1.168.192.in-addr.arpa". The
    hostname that was given is "Hampus-MBP.huawei.com".

Task 2)
  a)
    We can trace a packet route over the internet by using the 'traceroute'
    command:

  b)
    'traceroute', as the name suggests, traces the route of an IP-packet over
    the internet. It is implemented using the "User Datagram Protocol" (UDP),
    to transport the packet from the host computer to a specified destination.
    The reason UDP is used over the more reliable "Transmission Control
    Protocol" (TCP) is that UDP maintains the route for all packets that it
    sends, which is essential in order for 'traceroute' to work.

    'traceroute' initially sets the 'Time To Live' value to 1 in the IP-header.
    Then after every three packets it sends, the TTL value increments by one.
    When the first router then receives the first packet, it will decrement the
    TTL value by 1, resulting in a value of 0. This means that the packet can
    not be forwarded any further and an "Internet Control Message Protocol"
    (ICMP) message is generated. This message goes all the way back to the
    source. In the mean time, 'traceroute' have started counting the time from
    when a packet is being sent to when the ICMP message for that packet is
    received. Then the second package is sent and when a reply is received, the
    third packet is sent. When the reply for that packet has been received, the
    TTL value becomes 2. When the fourth packet then arrives at the first
    router on the way, TTL becomes 1 and the packet is forwarded to the next
    router. That router then does the same thing and generates an ICMP message
    that goes back to the source. This is repeated until the TTL is large
    enough to reach the destination. This way we can put together a table of
    three roundtrip times for each node on the route.

Task 3)
  a)
    The TCP/IP model has 4 layers, going from top to bottom; application layer,
    transport layer, internet layer and link layer. When applications in the
    top layer want to send data across the Internet, it has to make use of
    several protocols in order for the data to successfully arrive at the
    destination. Each layer has its own protocols and responsibilities, that
    are transparent to the other layers. For example, the Application layer can
    use "HyperText Transfer Protocol" (HTTP) to send data, but how the data
    is actually sent and how the other protocols work in the other layers, is
    ignored by HTTP. When HTTP wants to send a message to a remote host, it
    passes its data to the layer below, the transport layer. TCP is often used
    to make the transfer. TCP breaks up the data into the transport "Protocol
    Data Unit" (PDU) called "segment", where every segment gets its own header.
    This process is thus called segmentation, and TCP makes sure that the data
    is sent across a network in a reliable fashion. How the segments will
    travel across the network (or any network), is up to the next layer, the
    internet layer. Here IP is used to address every IP-enabled end-point in
    the network with a unique IP-address. IP encapsulates the segment into the
    internet PDU "packet", also by adding a header with the essential
    information about the data. How the packet is transferred between to
    devices in the network is up to the link layer. The link layer's
    responsibility lies in making sure that the data is sent across a link
    between two devices. The packet gets a header and a trailer in an
    encapsulation called "frame". The frame can be sent on any medium, as long
    as there is a protocol to handle the process. When a frame has been sent
    across the medium, a new header and trailer is added for the next link
    transfer.

    When the first frame arrives at the destination, decapsulation begins.
    The frame header and trailer is removed and the packet is revealed to the
    internet layer. After checking that the right packet has arrived, it
    removes its header as well and sends it to the transport layer. The
    transport layer also checks the validity of the segment, then decapsulate
    it and passes it on to the right application. The application then checks
    it message and use the data.


4a:
	www.chalmers.se:

	HEAD / HTTP/1.0

	HTTP/1.1 401 Unauthorized
	Content-Length: 16
	Content-Type: text/html; charset=utf-8
	Server: Microsoft-IIS/7.5
	SPRequestGuid: 1b34a246-0f4b-4010-9e90-6fd42daab1e4
	X-SharePointHealthScore: 0
	WWW-Authenticate: NTLM
	X-Powered-By: ASP.NET
	MicrosoftSharePointTeamServices: 14.0.0.7102
	X-MS-InvokeApp: 1; RequireReadOnly
	Date: Mon, 18 May 2015 08:20:33 GMT
	Connection: close

	The type of web server www.chalmers.se is using is "Microsoft-IIS/7.5".
	We get the response 401 Unauthorized, which means that we do not have access
	to URL resources without providing user authentication (log in somewhere with a username and a password). The authentication protocol in this case, which is specified in the WWW-Authenticate field of the HTTP header, is NTLM.

	Content-Length is the size of the content that is being sent, in octets(bytes).
	Content-Type indicates what type of media is being sent.
	SPRequestGuid contains diagnostic information about server problems.
	X-SharePointHealthScore is a number between 0 and 10 where 0 indicates low server load and 10 indicates high server load.
	X-Powered-By specifies which technology is used to support the web application.
	MicrosoftSharePointTeamServices indicates which version of Microsoft SharePoint is installed.
	X-MS-InvokeApp specifies if the application wants to use DirectInvoke, which lets a user open for example a PDF without first saving it to their computer. RequiredReadOnly means that it opens in Read-Only mode.


	www.tue.nl:

	HEAD / HTTP/1.0

	HTTP/1.1 301 Moved Permanently
	Date: Mon, 18 May 2015 08:24:17 GMT
	Server: Apache/2.2.22 (Ubuntu)
	X-Powered-By: PHP/5.3.10-1ubuntu3.18
	Location: http://www.tue.nl/
	Vary: Accept-Encoding
	Content-Type: text/html


	Connection closed by foreign host.


	www.tue.nl is using the web server type "Apache/2.2.22 (Ubuntu)".
	301 Move Permanently means that the resource we are requesting has been redirected tot a new URL. The new URL is specified in the Location field. In this case www.tue.nl is redirecting to http://www.tue.nl/.
	The Vary field specifies which fields of the request header to take into account when trying to find the right object in the cache.


4b:
	www.chalmers.se:

	HEAD / HTTP/1.1

	HTTP/1.1 400 Bad Request
	Content-Length: 334
	Content-Type: text/html; charset=us-ascii
	Server: Microsoft-HTTPAPI/2.0
	Date: Mon, 18 May 2015 09:15:38 GMT
	Connection: close

	www.tue.nl:

	HEAD / HTTP/1.1

	HTTP/1.1 400 Bad Request
	Date: Mon, 18 May 2015 09:16:38 GMT
	Server: Apache/2.2.22 (Ubuntu)
	Vary: Accept-Encoding
	Connection: close
	Content-Type: text/html; charset=iso-8859-1

4c:
	www.chalmers.se:

	HEAD / HTTP/1.1
	Host: www.chalmers.se

	HTTP/1.1 302 Redirect
	Content-Length: 164
	Content-Type: text/html; charset=UTF-8
	Location: http://www.chalmers.se/Pages/default.aspx
	Server: Microsoft-IIS/7.5
	SPRequestGuid: f25d9db4-5345-4c46-b7fc-292c52258273
	X-SharePointHealthScore: 0
	X-Powered-By: ASP.NET
	MicrosoftSharePointTeamServices: 14.0.0.7102
	X-MS-InvokeApp: 1; RequireReadOnly
	Date: Mon, 18 May 2015 09:27:28 GMT

	www.tue.nl:

	HEAD / HTTP/1.1
	Host: www.tue.nl

	HTTP/1.1 200 OK
	Date: Mon, 18 May 2015 09:28:56 GMT
	Server: Apache/2.2.22 (Ubuntu)
	X-Powered-By: PHP/5.3.10-1ubuntu3.18
	Set-Cookie: fe_typo_user=e4577ddec4a01568b6eefae39b0dcf4b; path=/
	Expires: Mon, 18 May 2015 10:21:29 GMT
	Cache-Control: max-age=3144
	Vary: Accept-Encoding
	Content-Type: text/html; charset=utf-8

	Connection closed by foreign host.

	In an HTTP 1.1 request you have to specify the name of the host of the resource you are requesting. You can also specify a port number, but we did not do that since it defaults to 80 if you do not specify one. If we do not include a host name in the request, the server responds with 400 Bad Request, as we saw in 4b.

	Say for example that we are hosting several different websites on a single machine. They all share an IP address. To be able to send the request to the correct website, we need to specify a host name. This is what the host header field is used for; differentiating between multiple hosts on the same IP.
